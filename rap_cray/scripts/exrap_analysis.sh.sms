#!/bin/ksh -l
################################################################################
####  UNIX Script Documentation Block
#                      .                                             .
# Script name:       exrap_analysis_sh.sms
# Script description:  runs the GSI and boundary update for the RAP cycle
# Author:   Ming Hu / Geoff Manikin / Julia Zhu  Org: EMC          Date: 2011-10-01
# 2011-10-01  M Hu / G Manikin / J Zhu

# Load modules
#module load PrgEnv-intel
#module load ip-intel/2.0.0
#module load cray-mpich
#module load NetCDF-intel-sandybridge/3.6.3
#
#ulimit -s 512000
set -x

cd $DATA

# Set up some constants
export HOMErap=${HOMErap:-/gpfs/hps/emc/meso/noscrub/Corey.Guastini/nwprod/rap.v3.0.0}
#export HOMErap=${HOMErap:-/nwprod/rap/v1.0.8}
export PARMrap=${PARMrap:-$HOMErap/parm}
export FIXrap=${FIXrap:-$HOMErap/fix}
export EXECrap=${EXECrap:-$HOMErap/exec}
export COMGFS=${COMGFS:-/gpfs/gp2/nco/ops/com/gfs/prod}
#export COMGFS=${COMGFS:-/global/noscrub/emc.glopara/com/gfs/para}
#export ndate=${ndate:-/nwprod/util/exec/ndate}
export ndate=${ndate:-/gpfs/hps/nco/ops/nwprod/prod_util.v1.0.5/exec/ndate}

# Directory for the CRTM files:
export FIXcrtm=${FIXcrtm:-/gpfs/gp1/nco/ops/nwprod/fix}
#export FIXcrtm=${FIXcrtm:-/meso/save/Ming.Hu/trunk/GSI_r480/fix/CRTM_Coefficients}

export WPSNAMELIST=namelist.wps
START_TIME=$PDY$cyc
echo $START_TIME >STARTTIME

# Compute date & time components for the analysis time
ymd=`echo ${START_TIME} | cut -c1-8`
ymdh=`echo ${START_TIME} | cut -c1-10`
mdh=`echo ${START_TIME} | cut -c5-10`
hh=`echo ${START_TIME} | cut -c9-10`

### Now run the GSI
# Set up some NCEP loadlevelor environment variables
#export SPINLOOPTIME=10000
#export YIELDLOOPTIME=40000
#export AIXTHREAD_SCOPE=S
#export MALLOCMULTIHEAP=true
#export MEMORY_AFFINITY=MCM
#export BIND_TASKS=YES

#export LD_LIBRARY_PATH=/gpfs/hps/usrx/local/prod/NetCDF/3.6.3/intel/sandybridge/lib
#module load ics
#module load ibmpe


#export MPICH_ENV_DISPLAY=1
#export MPICH_VERSION_DISPLAY=1
#export MPICH_ABORT_ON_ERROR=1
#export MPICH_RANK_REORDER_DISPLAY=1
export ATP_ENABLED=0
export MALLOC_MMAP_MAX=0
export MALLOC_TRIM_THRESHOLD_=134217728
export OMP_NUM_THREADS=2
export KMP_AFFINITY=disabled
export OMP_STACKSIZE=500M
export FORT_BUFFERED=true


#export MP_EAGER_LIMIT=165536
#export MP_COREFILE_FORMAT=lite
#export MP_EUIDEVELOP=min
#export MP_EUILIB=us
#export MP_MPILIB=mpich2

#export MP_LABELIO=yes
#export MP_USE_BULK_XFER=yes
#export MP_SHARED_MEMORY=yes

#export MPICH_ALLTOALL_THROTTLE=0
export KMP_STACKSIZE=1024m
#export MP_TASK_AFFINITY=cpu:2
export OMP_NUM_THREADS=2

# Set to yes for faster collective ops (mpi_reduce)
# but may not yield bitwise identical results from
# run to run when yes.
export MP_COLLECTIVE_OFFLOAD=yes

# Set up some constants
export RAPGES_FCYC=${RAPGES_FCYC:-$gespath/rap/rapges}
export RAPGES_PCYC=${RAPGES_PCYC:-$gespath/rap/rapges_pcyc}
export RAPGES_SATBIAS=${RAPGES_SATBIAS:-$gespath/rap/rapges_satbias}
export RAPGES_SFC=${RAPGES_SFC:-$gespath/rap/rapges_sfc}
export RAPGES_ENKF=${RAPGES_ENKF:-$gespath/rap/rapges_enkf}
export RAPBC=${RAPBC:-$gespath/rap/rapbc}

#export PREPDIR=${PREPDIR:-/ptmpd1/Corey.Guastini/com/${NET}/${envir}}
export PREPDIR=${PREPDIR:-/gpfs/gp2/nco/ops/com/rap/prod}
export PREPTESTDIR=${PREPTESTDIR:-/ptmpp1/Dennis.Keyser/CRON/TEST_VAD2/com/${NET}/${envir}}
#export PREPDIR=${PREPDIR:-/com/${NET}/prod}
#export PREPDIR2=${PREPDIR2:-/gpfs/hps/ptmp/Corey.Guastini/com/${NET}/prod}
export PREPDIR2=${PREPDIR2:-/gpfs/gp2/nco/ops/com/rap/prod}

# Compute date & time components for the analysis time
YYYY=`echo ${START_TIME} | cut -c1-4`
MM=`echo ${START_TIME} | cut -c5-6`
DD=`echo ${START_TIME} | cut -c7-8`
HH=`echo ${START_TIME} | cut -c9-10`
yy=`echo ${START_TIME} | cut -c3-4`
YYYYMMDDHH=${YYYY}${MM}${DD}${HH}
YYYYMMDD=${YYYY}${MM}${DD}

# Compute date & time components for the analysis time minus 1 day
DDm1=`$ndate -24 $START_TIME`
YMDm1=`echo ${DDm1} | cut -c1-8`

# Create the ram work directory and cd into it
workdir=$DATA/gsiprd
rm -rf ${workdir}
mkdir -p ${workdir}
cd ${workdir}
#/nwprod/util/ush/setup.sh

# Bring over background field
time_str=${YYYY}-${MM}-${DD}_${HH}_00_00
echo " time_str = ${time_str}"

# first step is to make sure that we aren't attempting a cold start
#   at a cycle time that won't be possible.   These are all cycle times
#   not divisible by 3, as we use boundary files which are generated by
#   3-hrly GFS output

let mod=${HH}%3
echo mod 
echo $mod 
if [[ ${mod} -ne '0' ]]; then
  echo 'a cold start will not be possible this cycle if needed'
fi

PCYC_TIME=`$ndate -1 $START_TIME`
if [[ ! -r ${RAPGES_PCYC}/rap_${PCYC_TIME}f001 &&  ! -r ${RAPBC}/wrfinput_d01_${time_str} ]]; then
    counter=1
    while [[ $counter -lt 19 ]]; do
     counterhr=$counter
     typeset -Z2 counterhr
     FCYC_TIME=`$ndate -${counter} $START_TIME`
     if [ -r ${RAPGES_FCYC}/rap_${FCYC_TIME}f0$counterhr ]; then
      echo 'guess available' >> guess.out
      break
     fi
     counter=` expr $counter + 1 `
    done
else
    echo 'guess available' >> guess.out
fi

if [ ! -r guess.out ]; then
    echo 'no first guess is available'
    echo 'please try a cycle divisible by 3'
    exit
fi

# if the cyce is 09 or 21, we should have the last 1-hr forecast
#   from the partial cycle available

if [[ ${HH} -eq '09' || ${HH} -eq '21' ]]; then
  PCYC_TIME=`$ndate -1 $START_TIME`
  if [ -r ${RAPGES_PCYC}/rap_${PCYC_TIME}f001 ]; then
    cp ${RAPGES_PCYC}/rap_${PCYC_TIME}f001 ./wrf_inout
     echo " Cycle ${YYYYMMDDHH}: GSI started with PCYC guess rap_${PCYC_TIME}f001" 
  fi
fi

# if we don't have a guess from the partial cycle, first try to use a
#   guess from the full cycle

if [ ! -r wrf_inout ]; then
    counter=1
    while [[ $counter -lt 19 ]]; do
     counterhr=$counter
     typeset -Z2 counterhr
     FCYC_TIME=`$ndate -${counter} $START_TIME`
     if [ -r ${RAPGES_FCYC}/rap_${FCYC_TIME}f0$counterhr ]; then
      echo " Cycled run using rap_${FCYC_TIME}f0$counterhr"
      cp ${RAPGES_FCYC}/rap_${FCYC_TIME}f0$counterhr ./wrf_inout
      echo " Cycle ${YYYYMMDDHH}: GSI background=rap_${FCYC_TIME}f0$counterhr"
      break
     fi
     counter=` expr $counter + 1 `
    done
fi

# attempt cold start if no guess has been found
if [ ! -r wrf_inout ]; then
   if [ -r "${RAPBC}/wrfinput_d01_${time_str}" ]; then
      echo "Cold Start with ${RAPBC}/wrfinput_d01_${time_str} "
      cp ${RAPBC}/wrfinput_d01_${time_str} ./wrf_inout
      echo " Cycle ${YYYYMMDDHH}: GSI cold start with wrfout_d01_${time_str}"
## cycle surface variables
      if [ -r "${RAPGES_SFC}/wrfout_d01_${HH}" ]; then
          echo "cycle Surface fields based on ${RAPGES_SFC}/wrfout_d01_${HH} "
          cp ${RAPGES_SFC}/wrfout_d01_${HH} ./wrfout_d01_save
          cp ${EXECrap}/rap_full_cycle_surace .
          runline="aprun -n 96 -N 24 ./rap_full_cycle_surface"
          $runline >> $DATA/$pgmout 2>errfile
          #impirun.lsf ${EXECrap}/rap_full_cycle_surface >> $DATA/$pgmout 2>errfile 
          #export err=$?; err_chk
      else
          echo "${RAPGES_SFC}/wrfout_d01_${HH} does not exist!!"
          echo "WARNING: no surface data cycled for background at ${time_str}!!!!"
      fi
   else
      echo "${RAPBC}/wrfinput_d01_${time_str} does not exist!!"
      echo "ERROR: no background file for analaysis at ${time_str}!!!!"
      echo " Cycle ${YYYYMMDDHH}: GSI failed because of no background" 
      err_exit
   fi
fi

# Copy cycled satellite radiance bias correction
  satcounter=1
  while [[ $satcounter -lt 121 ]]; do
    SAT_TIME=`$ndate -${satcounter} $START_TIME`
    if [ -r ${RAPGES_SATBIAS}/radstat.rap_${SAT_TIME} ]; then
      echo " using satellite bias from ${SAT_TIME}"
      cp ${RAPGES_SATBIAS}/radstat.rap_${SAT_TIME} ./radstat.rap
      cp ${RAPGES_SATBIAS}/satbias_out_${SAT_TIME} ./satbias_in
      cp ${RAPGES_SATBIAS}/satbias_pc.out_${SAT_TIME} ./satbias_pc
      break
    fi
    satcounter=` expr $satcounter + 1 `
  done
#cp ${RAPGES_SATBIAS}/radstat.rap_last ./radstat.rap
#cp ${RAPGES_SATBIAS}/satbias_out_last ./satbias_in
#cp ${RAPGES_SATBIAS}/satbias_pc.out_last ./satbias_pc

## update SST
## time_updateSST='00'
time_updateSST='01'
if [ ${HH} -eq ${time_updateSST} ]; then
  echo "update SST "
  NCEPSST=/gpfs/gp1/nco/ops/com/gfs/prod/sst.${YYYYMMDD}
  NCEPSST2=/gpfs/gp1/nco/ops/com/gfs/prod/sst.${YMDm1}
  cp ${FIXrap}/rap_RTG_SST_landmask.dat ./RTG_SST_landmask.dat
  cp ${FIXrap}/rap_geo_em.d01.nc  ./geo_em.d01.nc
  if [ -r "${NCEPSST}/rtgssthr_grb_0.083" ]; then
    cp ${NCEPSST}/rtgssthr_grb_0.083 SSTRTG
    cp ${NCEPSST}/sst2dvar.t12z.nam_grid SST14km
    cp ${EXECrap}/rap_process_sst .
    runline="aprun -n 96 -N 24 ./rap_process_sst"
    $runline >> $DATA/$pgmout 2>errfile
    #mpirun.lsf ${EXECrap}/rap_process_sst >> $DATA/$pgmout 2>errfile 
    #export err=$?; err_chk
  elif [ -r "${NCEPSST2}/rtgssthr_grb_0.083" ]; then
    cp ${NCEPSST2}/rtgssthr_grb_0.083 SSTRTG
    cp ${NCEPSST2}/sst2dvar.t12z.nam_grid SST14km
    cp ${EXECrap}/rap_process_sst .
    runline="aprun -n 96 -N 24 ./rap_process_sst"
    $runline >> $DATA/$pgmout 2>errfile
    #mpirun.lsf ${EXECrap}/rap_process_sst >> $DATA/$pgmout 2>errfile 
    #export err=$?; err_chk
  else
    echo "NOTE: no SST data available for ${HH}z cycle!"
  fi
else
  echo "NOTE: we do not update SST data for this cycle!"
fi

## trim snow
## trim_snow='23'
## trim_snow2='15'
trim_snow='00'
# if [ ${HH} -eq ${trim_snow} -o ${HH} -eq ${trim_snow2} ]; then
if [ ${HH} -eq ${trim_snow} ]; then
  if [ -r "${COMIN}/rap.t${HH}z.imssnow" ]; then
     echo "trim snow based on imssnow "
     cp  ${COMIN}/rap.t${HH}z.imssnow ./imssnow
     cp  ${FIXrap}/rap_geo_em.d01.nc ./geo_em.d01.nc
     cp ${EXECrap}/rap_process_imssnow .
     runline="aprun -n 96 -N 24 ./rap_process_imssnow"
     $runline >> $DATA/$pgmout 2>errfile
     #mpirun.lsf ${EXECrap}/rap_process_imssnow >> $DATA/$pgmout 2>errfile 
     #export err=$?; err_chk
  else
    echo "${COMIN}/rap.t${HH}z.imssnow does not exist!!"
    echo "no snow file available at for ${HH}z cycle!!!!"
  fi
else
  echo "NOTE: we do not trim snow during this cycle!"
fi

# prepbufr section
#ln -s ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.prepbufr.tm00 ./prepbufr
icnt=1
  while [ $icnt -lt 1000 ]
  do
    #if [ -r ${PREPTESTDIR}/rap.${YYYYMMDD}/rap.t${HH}z.prepbufr.tm00 ]
    if [ -r ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.prepbufr.tm00 ]
    then
      #sleep 30
      #ln -s ${PREPTESTDIR}/rap.${YYYYMMDD}/rap.t${HH}z.prepbufr.tm00 ./prepbufr
      ln -s ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.prepbufr.tm00 ./prepbufr
      break
    else
      icnt=$((icnt + 1))
      sleep 5
    fi
    if [ $icnt -ge 120 ]
    then
      echo "Warning: waited 10 minutes for prepbufr to be available but it is not"
      break
      #err_exit $msg
    fi
  done

if [ -r "${PREPDIR2}/rap.${YYYYMMDD}/rap.t${HH}z.mosaic.bufr" ]; then
  ln -s ${PREPDIR2}/rap.${YYYYMMDD}/rap.t${HH}z.mosaic.bufr ./refInGSI
else
  echo "Warning: Processed Mosaic data not available"
fi

if [ -r "${PREPDIR2}/rap.${YYYYMMDD}/rap.t${HH}z.nasacloud.bufr" ]; then
  ln -s ${PREPDIR2}/rap.${YYYYMMDD}/rap.t${HH}z.nasacloud.bufr ./larcInGSI
else
  echo "Warning: Processed Cloud data not available"
fi

if [ -r "${PREPDIR2}/rap.${YYYYMMDD}/rap.t${HH}z.lghtng.bufr" ]; then
  ln -s ${PREPDIR2}/rap.${YYYYMMDD}/rap.t${HH}z.lghtng.bufr ./lghtInGSI
else
  echo "Warning: Processed Lightning data not available"
fi

#add radial velocity data
if [ -r "${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.radwnd.tm00.bufr_d" ]; then
  ln -s ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.radwnd.tm00.bufr_d ./radarbufr
else
  echo "Warning: ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.radwnd.tm00.bufr_d is not available"
fi

if [ -r "${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.nexrad.tm00.bufr_d" ]; then
  ln -s ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.nexrad.tm00.bufr_d ./l2rwbufr
else
  echo "Warning: ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.nexrad.tm00.bufr_d is not available"
fi

#add radiance data
if [ -r "${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bamua.tm00.bufr_d" ]; then
  ln -s ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bamua.tm00.bufr_d ./amsuabufr
else
  echo "Warning: ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bamua.tm00.bufr_d is not available"
fi

if [ -r "${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bamub.tm00.bufr_d" ]; then
  ln -s ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bamub.tm00.bufr_d ./amsubbufr
else
  echo "Warning: ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bamub.tm00.bufr_d is not available"
fi

if [ -r "${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bhrs3.tm00.bufr_d" ]; then
  ln -s ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bhrs3.tm00.bufr_d ./hirs3bufr
else
  echo "Warning: ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bhrs3.tm00.bufr_d is not available"
fi

if [ -r "${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bhrs4.tm00.bufr_d" ]; then
  ln -s ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bhrs4.tm00.bufr_d ./hirs4bufr
else
  echo "Warning: ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bhrs4.tm00.bufr_d is not available"
fi

if [ -r "${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bmhs.tm00.bufr_d" ]; then
  ln -s ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bmhs.tm00.bufr_d ./mhsbufr
else
  echo "Warning: ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.1bmhs.tm00.bufr_d is not available"
fi

#add goes sounder data
if [ -r "${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.goesnd.tm00.bufr_d" ]; then
  ln -s ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.goesnd.tm00.bufr_d ./gsnd1bufr
else
  echo "Warning: ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.goesnd.tm00.bufr_d is not available"
fi

#add rars data
if [ -r "${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.esamua.tm00.bufr_d" ]; then
  ln -s ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.esamua.tm00.bufr_d ./amsuabufrears
else
  echo "Warning: ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.esamua.tm00.bufr_d is not available"
fi

if [ -r "${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.esmhs.tm00.bufr_d" ]; then
  ln -s ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.esmhs.tm00.bufr_d ./mhsbufrears
else
  echo "Warning: ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.esmhs.tm00.bufr_d is not available"
fi
#add SATWND data
if [ -r "${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.satwnd.tm00.bufr_d" ]; then
  ln -s ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.satwnd.tm00.bufr_d ./satwndbufr
else
  echo "Warning: ${PREPDIR}/rap.${YYYYMMDD}/rap.t${HH}z.satwnd.tm00.bufr_d is not available"
fi


# Set fixed files
#   berror   = forecast model background error statistics
#   specoef  = CRTM spectral coefficients
#   trncoef  = CRTM transmittance coefficients
#   RTMEMIS = CRTM coefficients for IR sea surface emissivity model
#   aerocoef = CRTM coefficients for aerosol effects
#   cldcoef  = CRTM coefficients for cloud effects
#   satinfo  = text file with information about assimilation of brightness temperatures
#   satangl  = angle dependent bias correction file (fixed in time)
#   pcpinfo  = text file with information about assimilation of prepcipitation rates
#   ozinfo   = text file with information about assimilation of ozone data
#   errtable = text file with obs error for conventional data (regional only)
#   convinfo = text file with information about assimilation of conventional data
#   bufrtable= text file ONLY needed for single obs test (oneobstest=.true.)
#   bftab_sst= bufr table for sst ONLY needed for sst retrieval (retrieval=.true.)

anavinfo=${FIXrap}/rap_anavinfo_arw_netcdf
BERROR=${FIXrap}/rap_berror_stats_global
# SATANGL=${FIXrap}/rap_global_satangbias.txt
SATINFO=${FIXrap}/rap_global_satinfo.txt
RTMFIX=${FIXcrtm}/crtm_v2.1.3
#RTMFIX=${FIXcrtm}

RTMAERO=${RTMFIX}/AerosolCoeff.bin
RTMCLDS=${RTMFIX}/CloudCoeff.bin
RTMEMIS_IRwater=${RTMFIX}/Nalli.IRwater.EmisCoeff.bin
RTMEMIS_IRice=${RTMFIX}/NPOESS.IRice.EmisCoeff.bin
RTMEMIS_IRland=${RTMFIX}/NPOESS.IRland.EmisCoeff.bin
RTMEMIS_IRsnow=${RTMFIX}/NPOESS.IRsnow.EmisCoeff.bin
RTMEMIS_VISice=${RTMFIX}/NPOESS.VISice.EmisCoeff.bin
RTMEMIS_VISland=${RTMFIX}/NPOESS.VISland.EmisCoeff.bin
RTMEMIS_VISsnow=${RTMFIX}/NPOESS.VISsnow.EmisCoeff.bin
RTMEMIS_VISwater=${RTMFIX}/NPOESS.VISwater.EmisCoeff.bin
RTMEMIS_MWwater=${RTMFIX}/FASTEM5.MWwater.EmisCoeff.bin

CONVINFO=${FIXrap}/rap_nam_regional_convinfo
OZINFO=${FIXrap}/rap_global_ozinfo.txt    
PCPINFO=${FIXrap}/rap_global_pcpinfo.txt

OBERROR=${FIXrap}/rap_nam_errtable.r3dv
AIRCRAFTREJECTLIST=${FIXrap}/rap_current_bad_aircraft.txt   # aircraft reject list
SURFACEUSELIST=${FIXrap}/rap_current_mesonet_uselist.txt # mesonet use list
SURFACEPROVIDERLIST=${FIXrap}/rap_gsd_sfcobs_provider.txt # mesonet network use list

# Fixed fields
 cp $anavinfo anavinfo
 cp $BERROR   berror_stats
# cp $SATANGL  satbias_angle
 cp $SATINFO  satinfo
 cp $CONVINFO convinfo
 cp $OZINFO   ozinfo
 cp $PCPINFO  pcpinfo
 cp $OBERROR  errtable
 cp $AIRCRAFTREJECTLIST current_bad_aircraft
 cp $SURFACEUSELIST gsd_sfcobs_uselist.txt
 cp $SURFACEPROVIDERLIST gsd_sfcobs_provider.txt

# 
#    # CRTM Spectral and Transmittance coefficients
ln -s $RTMAERO  ./AerosolCoeff.bin
ln -s $RTMCLDS  ./CloudCoeff.bin
ln -s $RTMEMIS_IRwater ./Nalli.IRwater.EmisCoeff.bin
ln -s $RTMEMIS_IRice ./NPOESS.IRice.EmisCoeff.bin
ln -s $RTMEMIS_IRsnow ./NPOESS.IRsnow.EmisCoeff.bin
ln -s $RTMEMIS_IRland ./NPOESS.IRland.EmisCoeff.bin
ln -s $RTMEMIS_VISice ./NPOESS.VISice.EmisCoeff.bin
ln -s $RTMEMIS_VISland ./NPOESS.VISland.EmisCoeff.bin
ln -s $RTMEMIS_VISsnow ./NPOESS.VISsnow.EmisCoeff.bin
ln -s $RTMEMIS_VISwater ./NPOESS.VISwater.EmisCoeff.bin
ln -s $RTMEMIS_MWwater ./FASTEM5.MWwater.EmisCoeff.bin

# Copy CRTM coefficient files based on entries in satinfo file
for file in `awk '{if($1!~"!"){print $1}}' ./satinfo | sort | uniq` ;do 
   ln -s ${RTMFIX}/${file}.SpcCoeff.bin ./
   ln -s ${RTMFIX}/${file}.TauCoeff.bin ./
done

# Only need this file for single obs test
 bufrtable=${PARMrap}/rap_prepobs.bufrtable
 cp $bufrtable ./prepobs_prep.bufrtable

## 
## Link to pre-processed GFS EnKF forecast members
##
for mem in `ls ${RAPGES_ENKF}/enspreproc_arw_mem???`
do
  memname=`basename ${mem}`
  ln -s ${mem} ${memname}
done

ls enspreproc_arw_mem??? > filelist

# Determine if hybrid option is available
beta1_inv=1.0
ifhyb=.false.
nummem=`more filelist | wc -l`
nummem=$((nummem - 3 ))
if [[ ${nummem} -eq 80 ]]; then
  echo "Do hybrid with ${memname}"
  beta1_inv=0.25
  ifhyb=.true.
  echo " Cycle ${YYYYMMDDHH}: GSI hybrid uses ${memname} with n_ens=${nummem}"
fi

# Set some parameters for use by the GSI executable and to build the namelist
export JCAP=62
export LEVS=60
export DELTIM=${DELTIM:-$((3600/($JCAP/20)))}
ndatrap=62
grid_ratio=2
cloudanalysistype=5
ifsoilnudge=.true.

# Build the GSI namelist on-the-fly
. ${PARMrap}/rap_gsiparm.anl.sh
cat << EOF > gsiparm.anl
$gsi_namelist
EOF

# cp ${FIXrap}/rap_ndas.t06z.satbias.tm03 ./satbias_in
## satellite bias correction
if [ -r radstat.rap ]; then
  listdiag=`tar xvf radstat.rap | cut -d' ' -f2 | grep _ges`
  for type in $listdiag; do
       diag_file=`echo $type | cut -d',' -f1`
       fname=`echo $diag_file | cut -d'.' -f1`
       date=`echo $diag_file | cut -d'.' -f2`
       gunzip $diag_file
       fnameanl=$(echo $fname|sed 's/_ges//g')
       mv $fname.$date $fnameanl
  done
  mv radstat.rap radstat.rap.for_this_cycle
fi

export pgm=rap_gsi
#. prep_step

#startmsg
cp ${EXECrap}/rap_gsi .
runline="time aprun -j1 -cc depth -n 96 -N 12 -d 2 ./rap_gsi"
#runline="time aprun -j1 -cc depth -n 48 -N 12 -d 2 ./rap_gsi"
$runline < gsiparm.anl >> $DATA/$pgmout 2>errfile
#mpirun.lsf ${EXECrap}/rap_gsi < gsiparm.anl >> $DATA/$pgmout 2>errfile 
#export MP_LABELIO=yes
#mpirun.lsf /nwprod/rap.v1.0.8/exec/rap_gsi < gsiparm.anl >> $DATA/$pgmout 2>errfile

# Loop over first and last outer loops to generate innovation
# diagnostic files for indicated observation types (groups)
#
# NOTE:  Since we set miter=2 in GSI namelist SETUP, outer
#        loop 03 will contain innovations with respect to 
#        the analysis.  Creation of o-a innovation files
#        is triggered by write_diag(3)=.true.  The setting
#        write_diag(1)=.true. turns on creation of o-g
#        innovation files.
#

loops="01 03"
for loop in $loops; do

case $loop in
  01) string=ges;;
  03) string=anl;;
   *) string=$loop;;
esac

#  Collect diagnostic files for obs types (groups) below
   listall="hirs2_n14 msu_n14 sndr_g08 sndr_g11 sndr_g11 sndr_g12 sndr_g13 sndr_g08_prep sndr_g11_prep sndr_g12_prep sndr_g13_prep sndrd1_g11 sndrd2_g11 sndrd3_g11 sndrd4_g11 sndrd1_g15 sndrd2_g15 sndrd3_g15 sndrd4_g15 sndrd1_g13 sndrd2_g13 sndrd3_g13 sndrd4_g13 hirs3_n15 hirs3_n16 hirs3_n17 amsua_n15 amsua_n16 amsua_n17 amsua_n18 amsua_n19 amsua_metop-a amsua_metop-b amsub_n15 amsub_n16 amsub_n17 hsb_aqua airs_aqua amsua_aqua imgr_g08 imgr_g11 imgr_g12 pcp_ssmi_dmsp pcp_tmi_trmm conv sbuv2_n16 sbuv2_n17 sbuv2_n18 omi_aura ssmi_f13 ssmi_f14 ssmi_f15 hirs4_n18 hirs4_metop-a mhs_n18 mhs_n19 mhs_metop-a mhs_metop-b amsre_low_aqua amsre_mid_aqua amsre_hig_aqua ssmis_las_f16 ssmis_uas_f16 ssmis_img_f16 ssmis_env_f16 iasi_metop-a"
   for type in $listall; do
      count=`ls pe*.${type}_${loop}* | wc -l`
      if [[ $count -gt 0 ]]; then
         `cat pe*.${type}_${loop}* > diag_${type}_${string}.${YYYYMMDDHH}`
      fi
   done
done

##tar diag files for next cycle run for enhanced radiance bias correction 
tar -cvzf radstat.rap *diag*ges*.${YYYYMMDDHH}
#cp ./radstat.rap ${RAPGES_SATBIAS}/radstat.rap_last
mv ./radstat.rap radstat.rap_${YYYYMMDDHH}
cp ./radstat.rap_${YYYYMMDDHH} ${RAPGES_SATBIAS}/
#cp ./satbias_out ${RAPGES_SATBIAS}/satbias_out_last
mv ./satbias_out satbias_out_${YYYYMMDDHH}
cp ./satbias_out_${YYYYMMDDHH} ${RAPGES_SATBIAS}/
#cp ./satbias_pc.out ${RAPGES_SATBIAS}/satbias_pc.out_last
mv ./satbias_pc.out satbias_pc.out_${YYYYMMDDHH}
cp ./satbias_pc.out_${YYYYMMDDHH} ${RAPGES_SATBIAS}/

#export err=$?; err_chk
mv gsiparm.anl gsiparm.anl_var
mv fort.201 fit_p1
mv fort.202 fit_w1
mv fort.203 fit_t1
mv fort.204 fit_q1
mv fort.205 fit_pw1
mv fort.206 fit_oz1
mv fort.207 fit_rad1
mv fort.208 fit_pcp1
mv fort.209 fit_rw1
mv fort.213 fit_sst1

cat fit_p1 fit_w1 fit_t1 fit_q1 fit_pw1 fit_rad1 fit_rw1 > ${COMOUT}/rap.t${cyc}z.fits.${tmmark}
cat fort.210 fort.211 fort.212 fort.214 fort.215 fort.217 fort.220 > ${COMOUT}/rap.t${cyc}z.fits2.${tmmark}

# cp satbias_out ${COMOUT}/rap.t${cyc}z.satbias.${tmmark}

ndatrap=67
grid_ratio=1
cloudanalysistype=6
ifhyb=.false.
ifsoilnudge=.true.

mv sigf03 sigf03_step1
mv siganl sigf03

# Build the GSI namelist on-the-fly
. ${PARMrap}/rap_gsiparm.anl.sh
cat << EOF > gsiparm.anl
$gsi_namelist
EOF

export pgm=rap_gsi
#startmsg
#runline="aprun -n 96 -N 24 ./rap_gsi"
runline="time aprun -j1 -cc depth -n 96 -N 12 -d 2 ./rap_gsi"
#runline="time aprun -j1 -cc depth -n 48 -N 12 -d 2 ./rap_gsi"
$runline < gsiparm.anl >> $DATA/$pgmout 2>errfile
#mpirun.lsf ${EXECrap}/rap_gsi < gsiparm.anl >> $DATA/$pgmout 2>errfile

cp gsiparm.anl gsiparm.anl_cloud
cp wrf_inout ${COMOUT}/rap.t${cyc}z.wrf_inout

#msg="JOB $job HAS COMPLETED NORMALLY."
#postmsg "$jlogfile" "$msg"

exit 0
