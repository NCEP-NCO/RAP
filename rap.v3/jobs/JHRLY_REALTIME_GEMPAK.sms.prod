#! /bin/sh
set -xa
export MP_IOAGENT_CNT=all
export MP_IO_BUFFER_SIZE=8M

$SMSBIN/smsinit $LOADL_STEP_ID
jid=`echo $LOADL_STEP_OUT | cut -f2 -d.`
mv $LOADL_STEP_OUT /com/output/${envir}/today/${job}.${jid}

date
#####################################################################
echo "------------------------------------------------"
echo "JHRLY_REALTIME_GEMPAK.sms.prod"
echo "------------------------------------------------"
echo "V. Krishna Kumar System Integration Branch"
echo "History: SEP 2004 - First implementation of this new script"
echo "Modified to add several new data types on JUN 2006"
echo "V. Krishna Kumar System Integration Branch JULY 2008"
echo "Revamped the code to plot data types automatically" 
echo "Modified to extend time series out to 3 days MAY 2010"
echo "Modified to replace RUC with Rapid Refresh (RAP) NOV 2011"
echo "Commented out removal of temp/data directory AUG 2012"
#####################################################################

#####################################################################
# obtain unique process id (pid) and make temp directory
#####################################################################
export pid=$$

export cycle=t${cyc}z

export DATA=/tmpnwprd/${job}.${pid}
export DATAO=$DATA
rm -rf $DATA
mkdir -p $DATA
cd $DATA

#####################################################################
# File To Log Msgs
#####################################################################
if [ $envir = "prod" ]
then
   export jlogfile=/com/logs/jlogfile
   export ALERTL=/com/logs/alertlog    # used by child script bufr_datacount.sh
else
   export jlogfile=/com/logs/${envir}/jlogfile
   export ALERTL=/com/logs/${envir}/alertlog    # used by child script bufr_datacount.sh
fi

#####################################################################
# Specify RUN Name
#####################################################################

export RUN=realtime
export NETH=hrly

#####################################################################
# Determine Job Output Name on System
#####################################################################
export outid="LL$job"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"

#####################################################################
# SENDSMS  - Flag Events on SMS
# SENDDBN  - Issue DBNet Client Calls
# SENDCOM  - Copy files to /com directory
# SENDSDM  - Send files to SDM printer (used by child script bufr_datacount.sh)
#####################################################################
export SENDSMS=YES
export SENDCOM=YES
export SENDDBN=YES
export SENDSDM=YES
export SENDWEB=YES

# turn on gathering of I/O statistics
export GET_IOPROFILE=NO
#####################################################################
# Specify Execution Areas
#####################################################################
export HOMEPREP=/nw${envir}
export HOMESCRIPTS=/nw${envir}/scripts
export USHPREP=${HOMEPREP}/ush
export UTILPREP=${HOMEPREP}/util/ush
export EXECPREP=${HOMEPREP}/exec
export FIXPREP=${HOMEPREP}/fix
export FIXWEB=${HOMEPREP}/gempak/web
export PARMPREP=/nwprod/parm

#####################################################################
# Set up the UTILITIES
#####################################################################
export ushscript=/nw${envir}/ush
export utilscript=/nwprod/util/ush
export utilities=/nwprod/util/ush
export utilexec=/nwprod/util/exec
#####################################################################
# Run setup to initialize working directory and utility scripts
#####################################################################
$utilscript/setup.sh
#####################################################################
# Run setpdy and initialize PDY variables
#####################################################################
$utilscript/setpdy.sh
. ./PDY

#####################################################################
# Specify com Areas where the files reside
#####################################################################
export COMIN=/com/${RUN}/${envir}/${NET}.${PDY}
export COMINm1=/com/${RUN}/${envir}/${NET}.${PDYm1}
export COMINm2=/com/${RUN}/${envir}/${NET}.${PDYm2}
export COMINm3=/com/${RUN}/${envir}/${NET}.${PDYm3}
export wcdir=/com/web/${envir}/realtime/${RUN}/${NET}
export COM1OUT=/com/web/${envir}/realtime/${RUN}
export COM1IN=/com/web/${envir}/realtime/${RUN}

export gifdir=$wcdir/${cycle}
mkdir -p $gifdir
#
# Now set up GEMPAK/NTRANS environment
#
. /nwprod/gempak/.gempak
msg='HOURLY REALTIME ASCI TO GEMPAK CONVERSION HAS BEGUN'
postmsg "$jlogfile" "$msg"

###############################################################################
# execute the utility script to convert the asci data to a gempak surface file
$UTILPREP/exhrly_realtime_asci2gempak.sh
###############################################################################

#
# Now set up GEMPAK/NTRANS environment since the plotting part and the poe
# set up starts here
#
ps -ef

msg='HOURLY TIME SERIES PLOTS HAVE BEGUN'
postmsg "$jlogfile" "$msg"

export yymm=`echo $PDY | cut -c3-6`
export hhmm=$cyc'00'

export yymm=`echo $PDY | cut -c3-6`
export hhmm=$cyc'00'

export lsfiles=`ls *alldatatype*file*z`
export bhour=`echo $lsfiles | cut -c35-36`
export bdate=`echo $lsfiles | cut -c20-25`

export lrfiles=`ls -r *alldatatype*file*z`
export ehour=`echo $lrfiles | cut -c35-36`
export edate=`echo $lrfiles | cut -c20-25`

#####################################################################
#  Specify data types for single-panel plots
#  by reading it from ${NET}_dataplotlist_t${cyc}z
#  saved in /com/realtime/prod/${NET}.${PDY}
#####################################################################

if [ $NET = "hourly" ]; then
   cp $COMIN/hly_dataplotlist_${cycle} datatypes_plotnumbs 
   tr '[a-z]' '[A-Z]' < datatypes_plotnumbs > hly_dataplotlist_${cycle}  
   plot_file=hly_dataplotlist_${cycle}
else
   cp $COMIN/${NET}_dataplotlist_${cycle} datatypes_plotnumbs 
   tr '[a-z]' '[A-Z]' < datatypes_plotnumbs > ${NET}_dataplotlist_${cycle}  
   plot_file=${NET}_dataplotlist_${cycle}
fi

cat $plot_file | awk '{ print $1,$2 }'>datatypes_list
wc -l datatypes_list > nlines_temp_file
total_dtypes=`awk '{ print $1 }' nlines_temp_file`

listperproc=`expr $total_dtypes / 16`
echo "List per processor = $listperproc"

msg="Total number of data types is $total_dtypes - each parallel task will process\
 $listperproc data types"

##
##---------------------------------------------------------------------
##

cal_total_dtypes=`expr $listperproc \* 16`
ndtypes=0
while [ "$ndtypes" -lt "$total_dtypes" ]
do
   ndtypes=`expr $ndtypes + 1`
   if [ $ndtypes -lt $cal_total_dtypes ]; then
      procn=`expr \( $ndtypes - 1 \) / $listperproc + 1`
   else
      procn=`expr $ndtypes - $cal_total_dtypes + 1`
   fi
   read x
   echo $x >> list_$procn
   echo ndtypes= $ndtypes
done <datatypes_list

##
##---------------------------------------------------------------------
##

tlist=`ls list*`

nlists=0
for tl in $tlist
do
   nlists=`expr $nlists + 1`
   echo `cat $tl | awk '{ print $1}'` > file.dtype_$nlists
   echo `cat $tl | awk '{ print $2}'` > plot.dtype_$nlists
done

##
##---------------------------------------------------------------------
##
## delete if number_of_processors file is present already
##
rm -rf number_of_processors

##
## Create a dummy process if the number of processors actually required is
## less than the alloted number of processors

numlist=`ls list* | wc -l`

while [ "$numlist" -lt "16" ]
do
   numlist=`expr $numlist + 1`
   touch list_$numlist
done

mlists=0
for im in `ls list_*`
do
   mlists=`expr $mlists + 1`
   echo $mlists >> number_of_processors
done

export n_proc=`cat number_of_processors`
echo $n_proc

# MPI debugging variables.  Don't always need.

poe hostname
export MP_PGMMODEL=mpmd
export MP_PROCS=16
export MP_NODES=1

#
# Create individual poe scripts
#
export nproc=$n_proc
#

for proc in $nproc
do
   cat <<EOF > poescript$proc

   echo $DISPLAY
   hostname
   DATA_TMP=$DATA
   export DATA=\$DATA_TMP/TASK$proc
   mkdir \$DATA
   cd \$DATA
   cp $DATAO/file.dtype_${proc} .
   cp $DATAO/plot.dtype_${proc} .
   cp $DATAO/*.sfc .
   cp $DATAO/*.pack .
   cp /nwprod/gempak/fix/coltbl.xwp.wbg coltbl.xwp
   $HOMESCRIPTS/exhrly_realtime_gempak.sh.sms $proc

EOF

done

#
# Create master poescript
#

for proc in $nproc
do
   chmod 775 ./poescript$proc
   if [ $proc -eq 1 ]; then
      echo "./poescript$proc" > poescript
   else
      echo "./poescript$proc" >> poescript
   fi
done

chmod 775 poescript
export MP_CMDFILE=poescript

#
# Execute the script.
msg="Begin poe"
postmsg "$jlogfile" "$msg"

pgm=poe

poe

echo "Ending Poe  : `date`"

export err=$?; err_chk

###
### copy the final time series sfc file and gif files 
### to /com/.. directory
### 

if test "$SENDCOM" = 'YES'
then
   for proc in $nproc
   do
      cp $DATA/TASK$proc/*.gif $gifdir/.
   done
fi

###
### Prepare the main web page (tables), data summary html and  
### data table html files by running exhrly_realtime_mainpage.sh
### script with three arguments
###
if [ $NET = "hourly" ] ; then
   NETW=hly
else
   NETW=rap
fi
################################################################
$UTILPREP/exhrly_realtime_mainpage.sh $COM1OUT $COM1IN ${NETW}_sumtable
################################################################

###
### Generates three outputs (i) realtime_mainpage.html (ii) ${NETW}_summary_table.html 
### (iii) ${NETW}_table.html files in $COM1OUT. The index files (i) index.mainpage.shtml  
### (ii) index.summary.shtml (iii) index.table.shtml files need to be copied to $COM1OUT 
### (i) and $gifdir (ii) & (iii)
###
if test "$SENDCOM" = 'YES'
then
   cp $FIXWEB/index.mainpage.shtml $COM1OUT/index.shtml
   cp $FIXWEB/index.summary.shtml $gifdir/. 
   cp $COM1OUT/${NETW}_summary_table.html $gifdir/summary.html
   cp $FIXWEB/index.table.shtml $gifdir/index.shtml
   cp $COM1OUT/${NETW}_table.html $gifdir/table.html
   chmod og+r $COM1OUT/*html
   chmod og+r $gifdir/*html
fi  
#
################################################################
### Run color code script.
bash $HOMESCRIPTS/exhrly_realtime_color.sh $COM1IN $COM1OUT
#$HOMESCRIPTS/exhrly_realtime_color.sh $COM1IN $COM1OUT
################################################################

###
### rsync the directory structure from $COMOUT to ncorzdm web server
###
if test "$SENDWEB" = 'YES'
then
   /usr/bin/ssh nwprod@ncorzdm.ncep.noaa.gov "pwd"
   if [ $? -eq 0 ]; then
      /usrx/local/bin/rsync  -v --recursive --links --perms --rsh=/usr/bin/ssh --stats --delete --whole-file --update  /com/web/${envir}/realtime/realtime nwprod@ncorzdm.ncep.noaa.gov:/home/www/nco/htdocs/pmb/nw${envir}/
      if [ $? -gt 0 ]; then
         echo "Error doing rsync"
         exit 30
      fi
      echo "HRLY/RAP Realtime webpages were sent"
   else
      echo "Cannot connect"
      exit 40
   fi
fi

cat $pgmout

echo "JHRLY_REALTIME_GEMPAK.sms." ${envir} " ran successfully !!!!!!!!"

#cd /tmpnwprd
#rm -rf $DATA

date

$SMSBIN/smscomplete

